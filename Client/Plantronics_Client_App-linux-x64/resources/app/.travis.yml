---
language: cpp
addons:
  apt:
    sources:
    - ubuntu-toolchain-r-test
    packages:
    - g++-4.8
    - g++-4.8-multilib
    - gcc-multilib
    - libgtk2.0-0
    - libxtst6
    - libnotify4
    - libgconf2-4
    - libgtk2.0-0:i386
    - libxtst6:i386
    - libnotify4:i386
    - libgconf2-4:i386
    - libnss3:i386
    - libasound2:i386
    - libxss1:i386
    - socat
    - libusb-1.0-0-dev
    - libudev-dev

# Build matrix
os:
- linux
- osx
env:
  global:
    secure: "ULgQHud6rffcRBZrDk/a1jVnAfUm6CseQJ8j89S7As7gc/bQkD9fi0OAyr5qT5ymxtn4ujXACDEeFDF/BlGwsbFoOS4sApcP33sJ5rsGVgTqihA8Dzb6k2F5e0Cd80+VzPa+lDdtMuRQMaVctA9rWe7VcfJWUc7rei4/kYfAAL0="
  matrix:
  - TRAVIS_NODE_VERSION="4"
  - TRAVIS_NODE_VERSION="6"
  - BINARY_BUILDER="true" TRAVIS_NODE_VERSION="8"
#  - BINARY_BUILDER="true" TRAVIS_NODE_VERSION="8" ARCH="x86"
# disable x86 for now because of weird errors with gyp under prebuild

matrix:
  exclude:
  - os: osx
    env: TRAVIS_NODE_VERSION="4" ARCH="x86"
  - os: osx
    env: TRAVIS_NODE_VERSION="6" ARCH="x86"
  - os: osx
    env: BINARY_BUILDER="true" TRAVIS_NODE_VERSION="8" ARCH="x86"

before_install:

# download node if testing x86 architecture
- >
  if [[ "$ARCH" == "x86" ]]; then
    BASE_URL=$(node -p "'https://nodejs.org/dist/' + process.version");
    X86_FILE=$(node -p "'node-' + process.version + '-' + process.platform + '-x86'");
    wget $BASE_URL/$X86_FILE.tar.gz;
    tar -xf $X86_FILE.tar.gz;
    nvm deactivate;
    export PATH=$X86_FILE/bin:$PATH;

  else
    nvm install $TRAVIS_NODE_VERSION
  fi;

#- >
#  if [[ $TRAVIS_OS_NAME == "linux" && "$ARCH" == "x86" ]]; then
#    dpkg-query -L libusb-1.0-0-dev:i386
#    dpkg-query -L libusb-1.0-0
#  fi;

# use g++-4.8 on Linux
- if [[ $TRAVIS_OS_NAME == "linux" ]]; then export CXX=g++-4.8; fi
- $CXX --version

# upgrade npm if on node 4 as npm2 doesn't like our dev peer deps
- if [[ $TRAVIS_NODE_VERSION == "4" ]]; then npm install -g npm; fi

# Cleanup the output of npm
- npm config set progress false
- npm config set spin false

# print versions
- echo "--------------------------"
- uname -a
- which node; file `which node`
- node --version
- node -p 'process.platform + "@" + process.arch'
- npm --version

# figure out if we should publish
- PUBLISH_BINARY=false
- echo $TRAVIS_BRANCH
- echo `git describe --tags --always HEAD`
- if [[ $TRAVIS_BRANCH == `git describe --tags --always HEAD` ]]; then PUBLISH_BINARY=$BINARY_BUILDER; fi;
- echo "Publishing native platform Binary Package? ->" $PUBLISH_BINARY

install:
# ensure source install works
#- export V=1
- npm run prepublish
- npm install --build-from-source

script:

- npm test

# inspect library dependencies
- >
  if [[ $TRAVIS_OS_NAME == "linux" ]]; then
    ldd ./build/Release/HID.node
  else
    otool -L ./build/Release/HID.node
  fi;

# if publishing, do it
- >
  if [[ $PUBLISH_BINARY == true ]]; then
    npm run prebuild-upload;
  fi;


# after_success:
# - bash <(curl -s https://codecov.io/bash)
